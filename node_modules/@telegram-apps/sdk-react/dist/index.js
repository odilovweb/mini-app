import { jsx as Pe } from "react/jsx-runtime";
import { createContext as nt, useContext as rt, useState as re, useEffect as S, useRef as be, useCallback as it, useMemo as ot } from "react";
var at = Object.defineProperty, ct = (t, e, s) => e in t ? at(t, e, { enumerable: !0, configurable: !0, writable: !0, value: s }) : t[e] = s, c = (t, e, s) => ct(t, typeof e != "symbol" ? e + "" : e, s);
function Se(t, e) {
  let s;
  const n = () => {
    s !== void 0 && e && e(s), s = void 0;
  };
  return [() => s === void 0 ? s = t(n) : s, n];
}
function Re(t) {
  const e = j(), { count: s } = e;
  e.unsubscribe(t), s && !e.count && Ct();
}
function ht(t) {
  return j().subscribe(t), () => Re(t);
}
class pt {
  constructor(e, s = {}) {
    this.scope = e, this.options = s;
  }
  /**
   * Prints message into a console in case, logger is currently enabled.
   * @param level - log level.
   * @param args - arguments.
   */
  print(e, ...s) {
    const n = /* @__PURE__ */ new Date(), r = Intl.DateTimeFormat("en-GB", {
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      fractionalSecondDigits: 3,
      timeZone: "UTC"
    }).format(n), { textColor: i, bgColor: o } = this.options, a = "font-weight: bold;padding: 0 5px;border-radius:5px";
    console[e](
      `%c${r}%c / %c${this.scope}`,
      `${a};background-color: lightblue;color:black`,
      "",
      `${a};${i ? `color:${i};` : ""}${o ? `background-color:${o}` : ""}`,
      ...s
    );
  }
  /**
   * Prints error message into a console.
   * @param args
   */
  error(...e) {
    this.print("error", ...e);
  }
  /**
   * Prints log message into a console.
   * @param args
   */
  log(...e) {
    this.print("log", ...e);
  }
}
const ie = new pt("SDK", {
  bgColor: "forestgreen",
  textColor: "white"
});
let X = !1;
const me = ({ name: t, payload: e }) => {
  ie.log("Event received:", e ? { name: t, payload: e } : { name: t });
};
function ut(t) {
  X !== t && (X = t, t ? ht(me) : Re(me));
}
function lt(...t) {
  X && ie.log(...t);
}
class N {
  constructor() {
    c(this, "listeners", /* @__PURE__ */ new Map()), c(this, "listenersCount", 0), c(this, "subscribeListeners", []);
  }
  /**
   * Removes all event listeners.
   */
  clear() {
    this.listeners.clear(), this.subscribeListeners = [];
  }
  /**
   * Returns count of bound listeners.
   */
  get count() {
    return this.listenersCount + this.subscribeListeners.length;
  }
  emit(e, ...s) {
    this.subscribeListeners.forEach((n) => n({
      event: e,
      args: s
    })), (this.listeners.get(e) || []).forEach(([n, r]) => {
      n(...s), r && this.off(e, n);
    });
  }
  /**
   * Adds new event listener.
   * @param event - event name.
   * @param listener - event listener.
   * @param once - should listener be called only once.
   * @returns Function to remove bound event listener.
   */
  on(e, s, n) {
    let r = this.listeners.get(e);
    return r || this.listeners.set(e, r = []), r.push([s, n]), this.listenersCount += 1, () => this.off(e, s);
  }
  /**
   * Removes event listener. In case, specified listener was bound several times, it removes
   * only a single one.
   * @param event - event name.
   * @param listener - event listener.
   */
  off(e, s) {
    const n = this.listeners.get(e) || [];
    for (let r = 0; r < n.length; r += 1)
      if (s === n[r][0]) {
        n.splice(r, 1), this.listenersCount -= 1;
        return;
      }
  }
  /**
   * Adds a new event listener for all events.
   * @param listener - event listener.
   * @returns Function to remove event listener.
   */
  subscribe(e) {
    return this.subscribeListeners.push(e), () => this.unsubscribe(e);
  }
  /**
   * Removes global event listener. In case, specified listener was bound several times, it removes
   * only a single one.
   * @param listener - event listener.
   */
  unsubscribe(e) {
    for (let s = 0; s < this.subscribeListeners.length; s += 1)
      if (this.subscribeListeners[s] === e) {
        this.subscribeListeners.splice(s, 1);
        return;
      }
  }
}
function ee(t, e, s) {
  return window.addEventListener(t, e, s), () => window.removeEventListener(t, e, s);
}
function oe(...t) {
  let e = !1;
  const s = t.flat(1);
  return [
    (n) => !e && s.push(n),
    () => {
      e || (e = !0, s.forEach((n) => n()));
    },
    e
  ];
}
class W extends Error {
  constructor(e, s, n) {
    super(s, { cause: n }), this.type = e, Object.setPrototypeOf(this, W.prototype);
  }
}
function b(t, e, s) {
  return new W(t, e, s);
}
const dt = "ERR_METHOD_UNSUPPORTED", _t = "ERR_METHOD_PARAMETER_UNSUPPORTED", wt = "ERR_UNKNOWN_ENV", gt = "ERR_INVOKE_CUSTOM_METHOD_RESPONSE", ft = "ERR_TIMED_OUT", bt = "ERR_UNEXPECTED_TYPE", xe = "ERR_PARSE", mt = "ERR_NAVIGATION_LIST_EMPTY", vt = "ERR_NAVIGATION_CURSOR_INVALID", bn = "ERR_NAVIGATION_ITEM_INVALID", mn = "ERR_SSR_INIT", yt = "ERR_INVALID_PATH_BASE";
function T() {
  return b(bt, "Value has unexpected type");
}
class G {
  constructor(e, s, n) {
    this.parser = e, this.isOptional = s, this.type = n;
  }
  /**
   * Attempts to parse passed value
   * @param value - value to parse.
   * @throws {SDKError} ERR_PARSE
   * @see ERR_PARSE
   */
  parse(e) {
    if (!(this.isOptional && e === void 0))
      try {
        return this.parser(e);
      } catch (s) {
        throw b(
          xe,
          `Unable to parse value${this.type ? ` as ${this.type}` : ""}`,
          s
        );
      }
  }
  optional() {
    return this.isOptional = !0, this;
  }
}
function A(t, e) {
  return () => new G(t, !1, e);
}
const E = A((t) => {
  if (typeof t == "boolean")
    return t;
  const e = String(t);
  if (e === "1" || e === "true")
    return !0;
  if (e === "0" || e === "false")
    return !1;
  throw T();
}, "boolean");
function Ce(t, e) {
  const s = {};
  for (const n in t) {
    const r = t[n];
    if (!r)
      continue;
    let i, o;
    if (typeof r == "function" || "parse" in r)
      i = n, o = typeof r == "function" ? r : r.parse.bind(r);
    else {
      const { type: a } = r;
      i = r.from || n, o = typeof a == "function" ? a : a.parse.bind(a);
    }
    try {
      const a = o(e(i));
      a !== void 0 && (s[n] = a);
    } catch (a) {
      throw b(xe, `Unable to parse field "${n}"`, a);
    }
  }
  return s;
}
function Te(t) {
  let e = t;
  if (typeof e == "string" && (e = JSON.parse(e)), typeof e != "object" || e === null || Array.isArray(e))
    throw T();
  return e;
}
function v(t, e) {
  return new G((s) => {
    const n = Te(s);
    return Ce(t, (r) => n[r]);
  }, !1, e);
}
const R = A((t) => {
  if (typeof t == "number")
    return t;
  if (typeof t == "string") {
    const e = Number(t);
    if (!Number.isNaN(e))
      return e;
  }
  throw T();
}, "number"), u = A((t) => {
  if (typeof t == "string" || typeof t == "number")
    return t.toString();
  throw T();
}, "string");
function Ae(t) {
  return v({
    eventType: u(),
    eventData: (e) => e
  }).parse(t);
}
function Et() {
  ["TelegramGameProxy_receiveEvent", "TelegramGameProxy", "Telegram"].forEach((t) => {
    delete window[t];
  });
}
function te(t, e) {
  window.dispatchEvent(new MessageEvent("message", {
    data: JSON.stringify({ eventType: t, eventData: e }),
    // We specify window.parent to imitate the case, the parent iframe sent us this event.
    source: window.parent
  }));
}
function Pt() {
  [
    ["TelegramGameProxy_receiveEvent"],
    // Windows Phone.
    ["TelegramGameProxy", "receiveEvent"],
    // Desktop.
    ["Telegram", "WebView", "receiveEvent"]
    // Android and iOS.
  ].forEach((t) => {
    let e = window;
    t.forEach((s, n, r) => {
      if (n === r.length - 1) {
        e[s] = te;
        return;
      }
      s in e || (e[s] = {}), e = e[s];
    });
  });
}
const St = {
  clipboard_text_received: v({
    req_id: u(),
    data: (t) => t === null ? t : u().optional().parse(t)
  }),
  custom_method_invoked: v({
    req_id: u(),
    result: (t) => t,
    error: u().optional()
  }),
  popup_closed: {
    parse(t) {
      return v({
        button_id: (e) => e == null ? void 0 : u().parse(e)
      }).parse(t ?? {});
    }
  },
  viewport_changed: v({
    height: R(),
    width: (t) => t == null ? window.innerWidth : R().parse(t),
    is_state_stable: E(),
    is_expanded: E()
  })
};
function Rt() {
  const t = new N(), e = new N();
  e.subscribe((n) => {
    t.emit("event", { name: n.event, payload: n.args[0] });
  }), Pt();
  const [, s] = oe(
    // Don't forget to remove created handlers.
    Et,
    // Add "resize" event listener to make sure, we always have fresh viewport information.
    // Desktop version of Telegram is sometimes not sending the viewport_changed
    // event. For example, when the MainButton is shown. That's why we should
    // add our own listener to make sure, viewport information is always fresh.
    // Issue: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/10
    ee("resize", () => {
      e.emit("viewport_changed", {
        width: window.innerWidth,
        height: window.innerHeight,
        is_state_stable: !0,
        is_expanded: !0
      });
    }),
    // Add listener, which handles events sent from the Telegram web application and also events
    // generated by the local emitEvent function.
    ee("message", (n) => {
      if (n.source !== window.parent)
        return;
      let r;
      try {
        r = Ae(n.data);
      } catch {
        return;
      }
      const { eventType: i, eventData: o } = r, a = St[i];
      try {
        const h = a ? a.parse(o) : o;
        e.emit(...h ? [i, h] : [i]);
      } catch (h) {
        ie.error(
          `An error occurred processing the "${i}" event from the Telegram application.
Please, file an issue here:
https://github.com/Telegram-Mini-Apps/telegram-apps/issues/new/choose`,
          r,
          h
        );
      }
    }),
    // Clear emitters.
    () => t.clear(),
    () => e.clear()
  );
  return [{
    on: e.on.bind(e),
    off: e.off.bind(e),
    subscribe(n) {
      return t.on("event", n);
    },
    unsubscribe(n) {
      t.off("event", n);
    },
    get count() {
      return e.count + t.count;
    }
  }, s];
}
const [xt, Ct] = Se(
  (t) => {
    const [e, s] = Rt(), n = e.off.bind(e);
    return e.off = (r, i) => {
      const { count: o } = e;
      n(r, i), o && !e.count && t();
    }, [e, s];
  },
  ([, t]) => t()
);
function j() {
  return xt()[0];
}
function z(t, e) {
  j().off(t, e);
}
function y(t, e, s) {
  return j().on(t, e, s);
}
function $(t) {
  return typeof t == "object" && t !== null && !Array.isArray(t);
}
function Tt(t, e) {
  const s = t.split("."), n = e.split("."), r = Math.max(s.length, n.length);
  for (let i = 0; i < r; i += 1) {
    const o = parseInt(s[i] || "0", 10), a = parseInt(n[i] || "0", 10);
    if (o !== a)
      return o > a ? 1 : -1;
  }
  return 0;
}
function f(t, e) {
  return Tt(t, e) <= 0;
}
function x(t, e, s) {
  if (typeof s == "string") {
    if (t === "web_app_open_link") {
      if (e === "try_instant_view")
        return f("6.4", s);
      if (e === "try_browser")
        return f("7.6", s);
    }
    if (t === "web_app_set_header_color" && e === "color")
      return f("6.9", s);
    if (t === "web_app_close" && e === "return_back")
      return f("7.6", s);
  }
  switch (t) {
    case "web_app_open_tg_link":
    case "web_app_open_invoice":
    case "web_app_setup_back_button":
    case "web_app_set_background_color":
    case "web_app_set_header_color":
    case "web_app_trigger_haptic_feedback":
      return f("6.1", e);
    case "web_app_open_popup":
      return f("6.2", e);
    case "web_app_close_scan_qr_popup":
    case "web_app_open_scan_qr_popup":
    case "web_app_read_text_from_clipboard":
      return f("6.4", e);
    case "web_app_switch_inline_query":
      return f("6.7", e);
    case "web_app_invoke_custom_method":
    case "web_app_request_write_access":
    case "web_app_request_phone":
      return f("6.9", e);
    case "web_app_setup_settings_button":
      return f("6.10", e);
    case "web_app_biometry_get_info":
    case "web_app_biometry_open_settings":
    case "web_app_biometry_request_access":
    case "web_app_biometry_request_auth":
    case "web_app_biometry_update_token":
      return f("7.2", e);
    case "web_app_setup_swipe_behavior":
      return f("7.7", e);
    default:
      return [
        "iframe_ready",
        "iframe_will_reload",
        "web_app_close",
        "web_app_data_send",
        "web_app_expand",
        "web_app_open_link",
        "web_app_ready",
        "web_app_request_theme",
        "web_app_request_viewport",
        "web_app_setup_main_button",
        "web_app_setup_closing_behavior"
      ].includes(t);
  }
}
function ke(t) {
  return "external" in t && $(t.external) && "notify" in t.external && typeof t.external.notify == "function";
}
function Ie(t) {
  return "TelegramWebviewProxy" in t && $(t.TelegramWebviewProxy) && "postEvent" in t.TelegramWebviewProxy && typeof t.TelegramWebviewProxy.postEvent == "function";
}
function ae() {
  try {
    return window.self !== window.top;
  } catch {
    return !0;
  }
}
const At = "https://web.telegram.org";
let Oe = At;
function vn(t) {
  Oe = t;
}
function kt() {
  return Oe;
}
function B(t, e, s) {
  let n = {}, r;
  if (!e && !s ? n = {} : e && s ? (n = s, r = e) : e && ("targetOrigin" in e ? n = e : r = e), lt("Posting event:", r ? { event: t, data: r } : { event: t }), ae())
    return window.parent.postMessage(
      JSON.stringify({ eventType: t, eventData: r }),
      n.targetOrigin || kt()
    );
  if (ke(window)) {
    window.external.notify(JSON.stringify({ eventType: t, eventData: r }));
    return;
  }
  if (Ie(window)) {
    window.TelegramWebviewProxy.postEvent(t, JSON.stringify(r));
    return;
  }
  throw b(
    wt,
    "Unable to determine current environment and possible way to send event. You are probably trying to use Mini Apps method outside the Telegram application environment."
  );
}
function It(t) {
  return (e, s) => {
    if (!x(e, t))
      throw b(dt, `Method "${e}" is unsupported in Mini Apps version ${t}`);
    if ($(s) && e === "web_app_set_header_color" && "color" in s && !x(e, "color", t))
      throw b(
        _t,
        `Parameter "color" of "${e}" method is unsupported in Mini Apps version ${t}`
      );
    return B(e, s);
  };
}
function qe(t) {
  return ({ req_id: e }) => e === t;
}
function Ve(t) {
  return b(ft, `Timeout reached: ${t}ms`);
}
function De(t, e) {
  return Promise.race([
    typeof t == "function" ? t() : t,
    new Promise((s, n) => {
      setTimeout(() => {
        n(Ve(e));
      }, e);
    })
  ]);
}
async function w(t) {
  let e;
  const s = new Promise((a) => e = a), { event: n, capture: r, timeout: i } = t, [, o] = oe(
    // We need to iterate over all tracked events, and create their event listeners.
    (Array.isArray(n) ? n : [n]).map((a) => y(a, (h) => {
      (!r || (Array.isArray(n) ? r({
        event: a,
        payload: h
      }) : r(h))) && e(h);
    }))
  );
  try {
    return (t.postEvent || B)(t.method, t.params), await (i ? De(s, i) : s);
  } finally {
    o();
  }
}
async function V(t, e, s, n = {}) {
  const {
    result: r,
    error: i
  } = await w({
    ...n,
    method: "web_app_invoke_custom_method",
    event: "custom_method_invoked",
    params: {
      method: t,
      params: e,
      req_id: s
    },
    capture: qe(s)
  });
  if (i)
    throw b(gt, i);
  return r;
}
function se(...t) {
  return t.map((e) => {
    if (typeof e == "string")
      return e;
    if ($(e))
      return se(Object.entries(e).map((s) => s[1] && s[0]));
    if (Array.isArray(e))
      return se(...e);
  }).filter(Boolean).join(" ");
}
function yn(...t) {
  return t.reduce((e, s) => ($(s) && Object.entries(s).forEach(([n, r]) => {
    const i = se(e[n], r);
    i.length && (e[n] = i);
  }), e), {});
}
function ce(t) {
  return /^#[\da-f]{6}$/i.test(t);
}
function Ot(t) {
  return /^#[\da-f]{3}$/i.test(t);
}
function Ne(t) {
  const e = t.replace(/\s/g, "").toLowerCase();
  if (ce(e))
    return e;
  if (Ot(e)) {
    let n = "#";
    for (let r = 0; r < 3; r += 1)
      n += e[1 + r].repeat(2);
    return n;
  }
  const s = e.match(/^rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)$/) || e.match(/^rgba\((\d{1,3}),(\d{1,3}),(\d{1,3}),\d{1,3}\)$/);
  if (!s)
    throw new Error(`Value "${t}" does not satisfy any of known RGB formats.`);
  return s.slice(1).reduce((n, r) => {
    const i = parseInt(r, 10).toString(16);
    return n + (i.length === 1 ? "0" : "") + i;
  }, "#");
}
function Be(t) {
  const e = Ne(t);
  return Math.sqrt(
    [0.299, 0.587, 0.114].reduce((s, n, r) => {
      const i = parseInt(e.slice(1 + r * 2, 1 + (r + 1) * 2), 16);
      return s + i * i * n;
    }, 0)
  ) < 120;
}
class qt {
  constructor(e) {
    c(this, "ee", new N()), c(this, "on", this.ee.on.bind(this.ee)), c(this, "off", this.ee.off.bind(this.ee)), this.state = e;
  }
  /**
   * Clones current state and returns its copy.
   */
  clone() {
    return { ...this.state };
  }
  set(e, s) {
    Object.entries(typeof e == "string" ? { [e]: s } : e).reduce((n, [r, i]) => this.state[r] === i || i === void 0 ? n : (this.state[r] = i, this.ee.emit(`change:${r}`, i), !0), !1) && this.ee.emit("change", this.state);
  }
  /**
   * Returns value by specified key.
   * @param key - state key.
   */
  get(e) {
    return this.state[e];
  }
}
class he {
  constructor(e) {
    c(this, "state"), c(this, "get"), c(this, "set"), c(this, "clone"), this.state = new qt(e), this.set = this.state.set.bind(this.state), this.get = this.state.get.bind(this.state), this.clone = this.state.clone.bind(this.state);
  }
}
function Me(t, e) {
  return (s) => x(e[s], t);
}
class pe extends he {
  constructor(e, s, n) {
    super(e), c(this, "supports"), this.supports = Me(s, n);
  }
}
class Vt extends pe {
  constructor(e, s, n) {
    super({ isVisible: e }, s, {
      show: "web_app_setup_back_button",
      hide: "web_app_setup_back_button"
    }), c(this, "on", (r, i) => r === "click" ? y("back_button_pressed", i) : this.state.on(r, i)), c(this, "off", (r, i) => r === "click" ? z("back_button_pressed", i) : this.state.off(r, i)), this.postEvent = n;
  }
  set isVisible(e) {
    this.set("isVisible", e), this.postEvent("web_app_setup_back_button", { is_visible: e });
  }
  /**
   * True if BackButton is currently visible.
   */
  get isVisible() {
    return this.get("isVisible");
  }
  /**
   * Hides the BackButton.
   */
  hide() {
    this.isVisible = !1;
  }
  /**
   * Shows the BackButton.
   */
  show() {
    this.isVisible = !0;
  }
}
const Le = A((t) => t instanceof Date ? t : new Date(R().parse(t) * 1e3), "Date");
function ue(t, e) {
  return new G((s) => {
    if (typeof s != "string" && !(s instanceof URLSearchParams))
      throw T();
    const n = typeof s == "string" ? new URLSearchParams(s) : s;
    return Ce(t, (r) => {
      const i = n.get(r);
      return i === null ? void 0 : i;
    });
  }, !1, e);
}
const Dt = v({
  id: R(),
  type: u(),
  title: u(),
  photoUrl: {
    type: u().optional(),
    from: "photo_url"
  },
  username: u().optional()
}, "Chat").optional(), ve = v({
  addedToAttachmentMenu: {
    type: E().optional(),
    from: "added_to_attachment_menu"
  },
  allowsWriteToPm: {
    type: E().optional(),
    from: "allows_write_to_pm"
  },
  firstName: {
    type: u(),
    from: "first_name"
  },
  id: R(),
  isBot: {
    type: E().optional(),
    from: "is_bot"
  },
  isPremium: {
    type: E().optional(),
    from: "is_premium"
  },
  languageCode: {
    type: u().optional(),
    from: "language_code"
  },
  lastName: {
    type: u().optional(),
    from: "last_name"
  },
  photoUrl: {
    type: u().optional(),
    from: "photo_url"
  },
  username: u().optional()
}, "User").optional();
function $e() {
  return ue({
    authDate: {
      type: Le(),
      from: "auth_date"
    },
    canSendAfter: {
      type: R().optional(),
      from: "can_send_after"
    },
    chat: Dt,
    chatInstance: {
      type: u().optional(),
      from: "chat_instance"
    },
    chatType: {
      type: u().optional(),
      from: "chat_type"
    },
    hash: u(),
    queryId: {
      type: u().optional(),
      from: "query_id"
    },
    receiver: ve,
    startParam: {
      type: u().optional(),
      from: "start_param"
    },
    user: ve
  }, "InitData");
}
const Nt = A((t) => Ne(u().parse(t)), "rgb");
function Bt(t) {
  return t.replace(/_[a-z]/g, (e) => e[1].toUpperCase());
}
function Mt(t) {
  return t.replace(/[A-Z]/g, (e) => `_${e.toLowerCase()}`);
}
const He = A(
  (t) => {
    const e = Nt().optional();
    return Object.entries(Te(t)).reduce((s, [n, r]) => (s[Bt(n)] = e.parse(r), s), {});
  },
  "ThemeParams"
);
function le(t) {
  return ue({
    botInline: {
      type: E().optional(),
      from: "tgWebAppBotInline"
    },
    initData: {
      type: $e().optional(),
      from: "tgWebAppData"
    },
    initDataRaw: {
      type: u().optional(),
      from: "tgWebAppData"
    },
    platform: {
      type: u(),
      from: "tgWebAppPlatform"
    },
    showSettings: {
      type: E().optional(),
      from: "tgWebAppShowSettings"
    },
    startParam: {
      type: u().optional(),
      from: "tgWebAppStartParam"
    },
    themeParams: {
      type: He(),
      from: "tgWebAppThemeParams"
    },
    version: {
      type: u(),
      from: "tgWebAppVersion"
    }
  }).parse(t);
}
function Ue(t) {
  return le(
    t.replace(/^[^?#]*[?#]/, "").replace(/[?#]/g, "&")
  );
}
function Lt() {
  return Ue(window.location.href);
}
function We() {
  return performance.getEntriesByType("navigation")[0];
}
function $t() {
  const t = We();
  if (!t)
    throw new Error("Unable to get first navigation entry.");
  return Ue(t.name);
}
function Ge(t) {
  return `telegram-apps/${t.replace(/[A-Z]/g, (e) => `-${e.toLowerCase()}`)}`;
}
function je(t, e) {
  sessionStorage.setItem(Ge(t), JSON.stringify(e));
}
function ze(t) {
  const e = sessionStorage.getItem(Ge(t));
  try {
    return e ? JSON.parse(e) : void 0;
  } catch {
  }
}
function Ht() {
  return le(ze("launchParams") || "");
}
function Ke(t) {
  return JSON.stringify(
    Object.fromEntries(
      Object.entries(t).map(([e, s]) => [Mt(e), s])
    )
  );
}
function Ut(t) {
  const {
    initDataRaw: e,
    themeParams: s,
    platform: n,
    version: r,
    showSettings: i,
    startParam: o,
    botInline: a
  } = t, h = new URLSearchParams();
  return h.set("tgWebAppPlatform", n), h.set("tgWebAppThemeParams", Ke(s)), h.set("tgWebAppVersion", r), e && h.set("tgWebAppData", e), o && h.set("tgWebAppStartParam", o), typeof i == "boolean" && h.set("tgWebAppShowSettings", i ? "1" : "0"), typeof a == "boolean" && h.set("tgWebAppBotInline", a ? "1" : "0"), h.toString();
}
function Je(t) {
  je("launchParams", Ut(t));
}
function ne() {
  for (const t of [
    // Try to retrieve launch parameters from the current location. This method can return
    // nothing in case, location was changed and then page was reloaded.
    Lt,
    // Then, try using the lower level API - window.performance.
    $t,
    // Finally, try to extract launch parameters from the session storage.
    Ht
  ])
    try {
      const e = t();
      return Je(e), e;
    } catch {
    }
  throw new Error(`Unable to retrieve launch parameters from any known source. Perhaps, you have opened your app outside of Telegram?

📖 Refer to docs for more information:
https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/environment`);
}
function Fe() {
  const t = We();
  return !!(t && t.type === "reload");
}
function Wt() {
  let t = 0;
  return () => (t += 1).toString();
}
const [Gt] = Se(Wt);
function l(t, e) {
  return () => {
    const s = ne(), n = {
      ...s,
      postEvent: It(s.version),
      createRequestId: Gt()
    };
    if (typeof t == "function")
      return t(n);
    const [r, i, o] = oe(), a = e({
      ...n,
      // State should only be passed only in case, current page was reloaded. If we don't add
      // this check, state restoration will work improperly in the web version of Telegram,
      // when we are always working in the same "session" (tab).
      state: Fe() ? ze(t) : void 0,
      addCleanup: r
    }), h = (p) => (o || r(
      p.on("change", (C) => {
        je(t, C);
      })
    ), p);
    return [
      a instanceof Promise ? a.then(h) : h(a),
      i
    ];
  };
}
const jt = l("backButton", ({
  postEvent: t,
  version: e,
  state: s = { isVisible: !1 }
}) => new Vt(s.isVisible, e, t));
class k extends pe {
  constructor() {
    super(...arguments), c(this, "on", this.state.on.bind(this.state)), c(this, "off", this.state.off.bind(this.state));
  }
}
function Qe(t) {
  const e = t.available ? t : {
    available: !1,
    device_id: "",
    token_saved: !1,
    access_requested: !1,
    access_granted: !1,
    type: ""
  };
  return {
    available: !0,
    type: e.type,
    deviceId: e.device_id,
    tokenSaved: e.token_saved,
    accessRequested: e.access_requested,
    accessGranted: e.access_granted
  };
}
class zt extends k {
  constructor({ postEvent: e, version: s, ...n }) {
    super(n, s, {
      auth: "web_app_biometry_request_auth",
      openSettings: "web_app_biometry_open_settings",
      requestAccess: "web_app_biometry_request_access",
      updateToken: "web_app_biometry_update_token"
    }), c(this, "postEvent"), c(this, "authPromise"), c(this, "accessPromise"), this.postEvent = e;
  }
  /**
   * Shows whether biometry is available.
   */
  get available() {
    return this.get("available");
  }
  /**
   * Shows whether permission to use biometrics has been granted.
   */
  get accessGranted() {
    return this.get("accessGranted");
  }
  /**
   * Shows whether if permission to use biometrics has been requested.
   */
  get accessRequested() {
    return this.get("accessRequested");
  }
  /**
   * Authenticates the user using biometrics.
   * @param options - method options.
   * @since 7.2
   * @returns Token from the local secure storage, if authentication was successful.
   */
  async authenticate({
    reason: e,
    ...s
  }) {
    return this.authPromise || (this.authPromise = w({
      ...s,
      method: "web_app_biometry_request_auth",
      event: "biometry_auth_requested",
      postEvent: this.postEvent,
      params: {
        // TODO: Check if reason is empty works fine.
        reason: (e || "").trim()
      }
    }).then(({ token: n }) => n).finally(() => this.authPromise = void 0)), this.authPromise;
  }
  /**
   * A unique device identifier that can be used to match the token to the device.
   */
  get deviceId() {
    return this.get("deviceId");
  }
  /**
   * Opens the biometric access settings for bots. Useful when you need to request biometrics
   * access to users who haven't granted it yet.
   *
   * _Note that this method can be called only in response to user interaction with the Mini App
   * interface (e.g. a click inside the Mini App or on the main button)_.
   * @since 7.2
   */
  openSettings() {
    this.postEvent("web_app_biometry_open_settings");
  }
  /**
   * Requests permission to use biometrics.
   * @since 7.2
   * @returns Promise with true, if access was granted.
   */
  requestAccess({ reason: e, ...s } = {}) {
    return this.accessPromise || (this.accessPromise = w({
      ...s,
      postEvent: this.postEvent,
      method: "web_app_biometry_request_access",
      event: "biometry_info_received",
      params: { reason: e || "" }
    }).then((n) => {
      const r = Qe(n);
      return this.set(r), r.accessGranted;
    }).finally(() => this.accessPromise = void 0)), this.accessPromise;
  }
  /**
   * The type of biometrics currently available on the device.
   */
  get biometryType() {
    return this.get("biometryType");
  }
  /**
   * Shows whether token was saved previously in the local secure storage.
   */
  get tokenSaved() {
    return this.get("tokenSaved");
  }
  /**
   * Updates the biometric token in a secure storage on the device.
   * @returns Promise with `true`, if token was updated.
   */
  async updateToken({ token: e, ...s } = {}) {
    return ["removed", "updated"].includes(
      (await w({
        ...s,
        postEvent: this.postEvent,
        method: "web_app_biometry_update_token",
        event: "biometry_token_updated",
        params: { token: e || "" }
      })).status
    );
  }
}
async function Kt(t) {
  return Qe(
    await w({
      ...t || {},
      method: "web_app_biometry_get_info",
      event: "biometry_info_received"
    })
  );
}
const Jt = l(
  "biometryManager",
  async ({ postEvent: t, version: e, state: s }) => new zt({
    ...s || x("web_app_biometry_get_info", e) ? s || await Kt({ timeout: 1e3 }) : {
      available: !1,
      accessGranted: !1,
      accessRequested: !1,
      tokenSaved: !1,
      deviceId: ""
    },
    version: e,
    postEvent: t
  })
);
class de extends he {
  constructor() {
    super(...arguments), c(this, "on", this.state.on.bind(this.state)), c(this, "off", this.state.off.bind(this.state));
  }
}
class Ft extends de {
  constructor(e, s) {
    super({ isConfirmationNeeded: e }), this.postEvent = s;
  }
  set isConfirmationNeeded(e) {
    this.set("isConfirmationNeeded", e), this.postEvent("web_app_setup_closing_behavior", { need_confirmation: e });
  }
  /**
   * True, if the confirmation dialog should be shown while the user is trying to close
   * the Mini App.
   */
  get isConfirmationNeeded() {
    return this.get("isConfirmationNeeded");
  }
  /**
   * Disables the confirmation dialog when closing the Mini App.
   */
  disableConfirmation() {
    this.isConfirmationNeeded = !1;
  }
  /**
   * Enables the confirmation dialog when closing the Mini App.
   */
  enableConfirmation() {
    this.isConfirmationNeeded = !0;
  }
}
const Qt = l(
  "closingBehavior",
  ({
    postEvent: t,
    state: e = { isConfirmationNeeded: !1 }
  }) => new Ft(e.isConfirmationNeeded, t)
);
class _e {
  constructor(e, s) {
    c(this, "supports"), this.supports = Me(e, s);
  }
}
function Yt(t) {
  if (Array.isArray(t))
    return t;
  if (typeof t == "string")
    try {
      const e = JSON.parse(t);
      if (Array.isArray(e))
        return e;
    } catch {
    }
  throw T();
}
class Zt extends G {
  constructor(e, s, n) {
    super(Yt, s, n), c(this, "itemParser"), this.itemParser = typeof e == "function" ? e : e.parse.bind(e);
  }
  /**
   * Attempts to parse passed value
   * @param value - value to parse.
   * @throws {SDKError} ERR_PARSE
   * @see ERR_PARSE
   */
  parse(e) {
    const s = super.parse(e);
    return s === void 0 ? s : s.map(this.itemParser);
  }
  of(e) {
    return this.itemParser = typeof e == "function" ? e : e.parse.bind(e), this;
  }
}
function Xt(t) {
  return new Zt((e) => e, !1, t);
}
function ye(t, e) {
  return Object.fromEntries(t.map((s) => [s, e]));
}
class es extends _e {
  constructor(e, s, n) {
    super(e, {
      delete: "web_app_invoke_custom_method",
      get: "web_app_invoke_custom_method",
      getKeys: "web_app_invoke_custom_method",
      set: "web_app_invoke_custom_method"
    }), this.createRequestId = s, this.postEvent = n;
  }
  /**
   * Deletes specified key or keys from the cloud storage.
   * @param keyOrKeys - key or keys to delete.
   * @param options - request execution options.
   */
  async delete(e, s = {}) {
    const n = Array.isArray(e) ? e : [e];
    n.length && await V(
      "deleteStorageValues",
      { keys: n },
      this.createRequestId(),
      { ...s, postEvent: this.postEvent }
    );
  }
  /**
   * Returns list of all keys presented in the cloud storage.
   * @param options - request execution options.
   */
  async getKeys(e = {}) {
    return Xt().of(u()).parse(
      await V(
        "getStorageKeys",
        {},
        this.createRequestId(),
        { ...e, postEvent: this.postEvent }
      )
    );
  }
  async get(e, s = {}) {
    const n = Array.isArray(e) ? e : [e];
    if (!n.length)
      return ye(n, "");
    const r = await V(
      "getStorageValues",
      { keys: n },
      this.createRequestId(),
      { ...s, postEvent: this.postEvent }
    ), i = v(ye(n, u()), "CloudStorageData").parse(r);
    return Array.isArray(e) ? i : i[e];
  }
  /**
   * Saves specified value by key.
   * @param key - storage key.
   * @param value - storage value.
   * @param options - request execution options.
   */
  async set(e, s, n = {}) {
    await V(
      "saveStorageValue",
      { key: e, value: s },
      this.createRequestId(),
      { ...n, postEvent: this.postEvent }
    );
  }
}
const ts = l(
  ({ createRequestId: t, postEvent: e, version: s }) => new es(s, t, e)
);
class ss extends _e {
  constructor(e, s) {
    super(e, {
      impactOccurred: "web_app_trigger_haptic_feedback",
      notificationOccurred: "web_app_trigger_haptic_feedback",
      selectionChanged: "web_app_trigger_haptic_feedback"
    }), this.postEvent = s;
  }
  /**
   * A method tells that an impact occurred. The Telegram app may play the
   * appropriate haptics based on style value passed.
   * @param style - impact style.
   */
  impactOccurred(e) {
    this.postEvent("web_app_trigger_haptic_feedback", {
      type: "impact",
      impact_style: e
    });
  }
  /**
   * A method tells that a task or action has succeeded, failed, or produced
   * a warning. The Telegram app may play the appropriate haptics based on
   * type value passed.
   * @param type - notification type.
   */
  notificationOccurred(e) {
    this.postEvent("web_app_trigger_haptic_feedback", {
      type: "notification",
      notification_type: e
    });
  }
  /**
   * A method tells that the user has changed a selection. The Telegram app
   * may play the appropriate haptics.
   *
   * Do not use this feedback when the user makes or confirms a selection;
   * use it only when the selection changes.
   */
  selectionChanged() {
    this.postEvent("web_app_trigger_haptic_feedback", { type: "selection_change" });
  }
}
const ns = l(
  ({ version: t, postEvent: e }) => new ss(t, e)
);
class rs {
  constructor(e) {
    this.initData = e;
  }
  /**
   * @see InitDataParsed.authDate
   */
  get authDate() {
    return this.initData.authDate;
  }
  /**
   * @see InitDataParsed.canSendAfter
   */
  get canSendAfter() {
    return this.initData.canSendAfter;
  }
  /**
   * Date after which it is allowed to call
   * the [answerWebAppQuery](https://core.telegram.org/bots/api#answerwebappquery) method.
   */
  get canSendAfterDate() {
    const { canSendAfter: e } = this;
    return e ? new Date(this.authDate.getTime() + e * 1e3) : void 0;
  }
  /**
   * @see InitDataParsed.chat
   */
  get chat() {
    return this.initData.chat;
  }
  /**
   * @see InitDataParsed.chatType
   */
  get chatType() {
    return this.initData.chatType;
  }
  /**
   * @see InitDataParsed.chatInstance
   */
  get chatInstance() {
    return this.initData.chatInstance;
  }
  /**
   * @see InitDataParsed.hash
   */
  get hash() {
    return this.initData.hash;
  }
  /**
   * @see InitDataParsed.queryId
   */
  get queryId() {
    return this.initData.queryId;
  }
  /**
   * @see InitDataParsed.receiver
   */
  get receiver() {
    return this.initData.receiver;
  }
  /**
   * @see InitDataParsed.startParam
   */
  get startParam() {
    return this.initData.startParam;
  }
  /**
   * @see InitDataParsed.user
   */
  get user() {
    return this.initData.user;
  }
}
const is = l(
  ({ initData: t }) => t ? new rs(t) : void 0
);
function En(t) {
  return $e().parse(t);
}
class os extends k {
  constructor(e, s, n) {
    super({ isOpened: e }, s, { open: "web_app_open_invoice" }), this.postEvent = n;
  }
  set isOpened(e) {
    this.set("isOpened", e);
  }
  /**
   * True if invoice is currently opened.
   */
  get isOpened() {
    return this.get("isOpened");
  }
  async open(e, s) {
    if (this.isOpened)
      throw new Error("Invoice is already opened");
    let n;
    if (!s)
      n = e;
    else {
      const { hostname: r, pathname: i } = new URL(e, window.location.href);
      if (r !== "t.me")
        throw new Error(`Incorrect hostname: ${r}`);
      const o = i.match(/^\/(\$|invoice\/)([A-Za-z0-9\-_=]+)$/);
      if (!o)
        throw new Error('Link pathname has incorrect format. Expected to receive "/invoice/{slug}" or "/${slug}"');
      [, , n] = o;
    }
    this.isOpened = !0;
    try {
      return (await w({
        method: "web_app_open_invoice",
        event: "invoice_closed",
        params: { slug: n },
        postEvent: this.postEvent,
        capture(r) {
          return n === r.slug;
        }
      })).status;
    } finally {
      this.isOpened = !1;
    }
  }
}
const as = l(
  ({ version: t, postEvent: e }) => new os(!1, t, e)
);
class cs extends he {
  constructor({ postEvent: e, ...s }) {
    super(s), c(this, "postEvent"), c(this, "on", (n, r) => n === "click" ? y("main_button_pressed", r) : this.state.on(n, r)), c(this, "off", (n, r) => n === "click" ? z("main_button_pressed", r) : this.state.off(n, r)), this.postEvent = e;
  }
  /**
   * The MainButton background color.
   */
  get bgColor() {
    return this.get("bgColor");
  }
  /**
   * Sends current local state to the Telegram application.
   */
  commit() {
    this.text !== "" && this.postEvent("web_app_setup_main_button", {
      is_visible: this.isVisible,
      is_active: this.isEnabled,
      is_progress_visible: this.isLoaderVisible,
      text: this.text,
      color: this.bgColor,
      text_color: this.textColor
    });
  }
  /**
   * Disables the MainButton.
   * @see Does not work on Android: https://github.com/Telegram-Mini-Apps/issues/issues/1
   */
  disable() {
    return this.isEnabled = !1, this;
  }
  /**
   * Enables the MainButton.
   */
  enable() {
    return this.isEnabled = !0, this;
  }
  /**
   * Hides the MainButton.
   */
  hide() {
    return this.isVisible = !1, this;
  }
  /**
   * Hides the MainButton loading indicator.
   */
  hideLoader() {
    return this.isLoaderVisible = !1, this;
  }
  set isEnabled(e) {
    this.setParams({ isEnabled: e });
  }
  /**
   * True if the MainButton is enabled.
   */
  get isEnabled() {
    return this.get("isEnabled");
  }
  set isLoaderVisible(e) {
    this.setParams({ isLoaderVisible: e });
  }
  /**
   * True if the MainButton loader is visible.
   */
  get isLoaderVisible() {
    return this.get("isLoaderVisible");
  }
  set isVisible(e) {
    this.setParams({ isVisible: e });
  }
  /**
   * True if the MainButton is visible.
   */
  get isVisible() {
    return this.get("isVisible");
  }
  /**
   * Shows the MainButton.
   *
   * Note that opening the Mini App from the attachment menu hides the main button until the
   * user interacts with the Mini App interface.
   */
  show() {
    return this.isVisible = !0, this;
  }
  /**
   * Shows a loading indicator on the Main Button.
   */
  showLoader() {
    return this.isLoaderVisible = !0, this;
  }
  /**
   * Sets a new MainButton text. Minimal length for the text is 1 symbol, and maximum is 64 symbols.
   * @param text - a new text.
   */
  setText(e) {
    return this.setParams({ text: e });
  }
  /**
   * Sets a new Main Button text color.
   * @param textColor - new text color.
   */
  setTextColor(e) {
    return this.setParams({ textColor: e });
  }
  /**
   * Updates current Main Button color.
   * @param bgColor - color to set.
   */
  setBgColor(e) {
    return this.setParams({ bgColor: e });
  }
  /**
   * Allows setting multiple Main Button parameters.
   * @param params - Main Button parameters.
   */
  setParams(e) {
    return this.set(e), this.commit(), this;
  }
  /**
   * The MainButton text.
   */
  get text() {
    return this.get("text");
  }
  /**
   * The MainButton text color.
   */
  get textColor() {
    return this.get("textColor");
  }
}
const hs = l(
  "mainButton",
  ({
    postEvent: t,
    themeParams: e,
    state: s = {
      isVisible: !1,
      isEnabled: !1,
      text: "",
      isLoaderVisible: !1,
      textColor: e.buttonTextColor || "#ffffff",
      bgColor: e.buttonColor || "#000000"
    }
  }) => new cs({ ...s, postEvent: t })
);
function ps() {
  return ue({
    contact: v({
      userId: {
        type: R(),
        from: "user_id"
      },
      phoneNumber: {
        type: u(),
        from: "phone_number"
      },
      firstName: {
        type: u(),
        from: "first_name"
      },
      lastName: {
        type: u().optional(),
        from: "last_name"
      }
    }),
    authDate: {
      type: Le(),
      from: "auth_date"
    },
    hash: u()
  }, "RequestedContact");
}
function Ye(t, e) {
  return (s) => {
    const [n, r] = e[s];
    return x(n, r, t);
  };
}
function us(t) {
  return new Promise((e) => {
    setTimeout(e, t);
  });
}
class ls extends k {
  constructor({ postEvent: e, createRequestId: s, version: n, botInline: r, ...i }) {
    super(i, n, {
      requestPhoneAccess: "web_app_request_phone",
      requestWriteAccess: "web_app_request_write_access",
      switchInlineQuery: "web_app_switch_inline_query",
      setHeaderColor: "web_app_set_header_color",
      setBackgroundColor: "web_app_set_background_color"
    }), c(this, "botInline"), c(this, "postEvent"), c(this, "createRequestId"), c(this, "requestPhoneAccessPromise"), c(this, "requestWriteAccessPromise"), c(this, "supportsParam"), this.createRequestId = s, this.postEvent = e, this.botInline = r;
    const o = this.supports.bind(this);
    this.supports = (a) => o(a) ? a !== "switchInlineQuery" || r : !1, this.supportsParam = Ye(n, {
      "setHeaderColor.color": ["web_app_set_header_color", "color"],
      "close.returnBack": ["web_app_close", "return_back"]
    });
  }
  /**
   * Attempts to get requested contact.
   * @param timeout - request timeout.
   */
  async getRequestedContact({
    timeout: e = 1e4
  } = {}) {
    return ps().parse(
      await V(
        "getRequestedContact",
        {},
        this.createRequestId(),
        { postEvent: this.postEvent, timeout: e }
      )
    );
  }
  /**
   * The Mini App background color.
   * @example "#ffaabb"
   */
  get bgColor() {
    return this.get("bgColor");
  }
  /**
   * Closes the Mini App.
   * @param returnBack - should the application be wrapped into the bottom bar.
   */
  close(e) {
    this.postEvent("web_app_close", this.supportsParam("close.returnBack") ? { return_back: e } : {});
  }
  /**
   * The Mini App header color.
   * @example "#ffaabb"
   * @example "bg_color"
   */
  get headerColor() {
    return this.get("headerColor");
  }
  /**
   * True if the Mini App is currently launched in bot inline mode.
   */
  get isBotInline() {
    return this.botInline;
  }
  /**
   * True if the current Mini App background color is recognized as dark.
   */
  get isDark() {
    return Be(this.bgColor);
  }
  /**
   * Informs the Telegram app that the Mini App is ready to be displayed.
   *
   * It is recommended to call this method as early as possible, as soon as all essential
   * interface elements loaded. Once this method called, the loading placeholder is hidden
   * and the Mini App shown.
   *
   * If the method not called, the placeholder will be hidden only when the page fully loaded.
   */
  ready() {
    this.postEvent("web_app_ready");
  }
  /**
   * Requests current user contact information. In contrary to requestPhoneAccess, this method
   * returns promise with contact information that rejects in case, user denied access, or request
   * failed.
   * @param options - additional options.
   */
  async requestContact({ timeout: e = 5e3 } = {}) {
    try {
      return await this.getRequestedContact();
    } catch {
    }
    if (await this.requestPhoneAccess() !== "sent")
      throw new Error("Access denied.");
    const s = Date.now() + e;
    let n = 50;
    return De(async () => {
      for (; Date.now() < s; ) {
        try {
          return await this.getRequestedContact();
        } catch {
        }
        await us(n), n += 50;
      }
      throw Ve(e);
    }, e);
  }
  /**
   * Requests current user phone access. Method returns promise, which resolves
   * status of the request. In case, user accepted the request, Mini App bot will receive
   * the according notification.
   *
   * To obtain the retrieved information instead, utilize the `requestContact` method.
   * @param options - additional options.
   * @see requestContact
   */
  async requestPhoneAccess(e = {}) {
    return this.requestPhoneAccessPromise || (this.requestPhoneAccessPromise = w({
      ...e,
      method: "web_app_request_phone",
      event: "phone_requested",
      postEvent: this.postEvent
    }).then(({ status: s }) => s).finally(() => this.requestPhoneAccessPromise = void 0)), this.requestPhoneAccessPromise;
  }
  /**
   * Requests write message access to current user.
   * @param options - additional options.
   */
  async requestWriteAccess(e = {}) {
    return this.requestWriteAccessPromise || (this.requestWriteAccessPromise = w({
      ...e,
      method: "web_app_request_write_access",
      event: "write_access_requested",
      postEvent: this.postEvent
    }).then(({ status: s }) => s).finally(() => this.requestWriteAccessPromise = void 0)), this.requestWriteAccessPromise;
  }
  /**
   * A method used to send data to the bot. When this method called, a service message sent to
   * the bot containing the data of the length up to 4096 bytes, and the Mini App closed. See the
   * field `web_app_data` in the class [Message](https://core.telegram.org/bots/api#message).
   *
   * This method is only available for Mini Apps launched via a Keyboard button.
   * @param data - data to send to bot.
   * @throws {Error} data has incorrect size.
   */
  sendData(e) {
    const { size: s } = new Blob([e]);
    if (!s || s > 4096)
      throw new Error(`Passed data has incorrect size: ${s}`);
    this.postEvent("web_app_data_send", { data: e });
  }
  /**
   * Updates current Mini App header color.
   *
   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/9
   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/8
   * @param color - color key or RGB color.
   */
  setHeaderColor(e) {
    this.postEvent("web_app_set_header_color", ce(e) ? { color: e } : { color_key: e }), this.set("headerColor", e);
  }
  /**
   * Updates current Mini App background color.
   *
   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/9
   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/8
   * @param color - RGB color.
   */
  setBgColor(e) {
    this.postEvent("web_app_set_background_color", { color: e }), this.set("bgColor", e);
  }
  /**
   * Inserts the bot's username and the specified inline query in the current chat's input field.
   * Query may be empty, in which case only the bot's username will be inserted. The client prompts
   * the user to choose a specific chat, then opens that chat and inserts the bot's username and
   * the specified inline query in the input field.
   * @param text - text which should be inserted in the input after the current bot name. Max
   * length is 256 symbols.
   * @param chatTypes - List of chat types which could be chosen to send the message. Could be
   * empty list.
   */
  switchInlineQuery(e, s = []) {
    if (!this.supports("switchInlineQuery") && !this.isBotInline)
      throw new Error("Method is unsupported because Mini App should be launched in inline mode.");
    this.postEvent("web_app_switch_inline_query", { query: e, chat_types: s });
  }
}
const ds = l(
  "miniApp",
  ({
    themeParams: t,
    botInline: e = !1,
    state: s = {
      bgColor: t.bgColor || "#ffffff",
      headerColor: t.headerBgColor || "#000000"
    },
    ...n
  }) => new ls({ ...n, ...s, botInline: e })
);
function _s(t) {
  const e = t.message.trim(), s = (t.title || "").trim(), n = t.buttons || [];
  let r;
  if (s.length > 64)
    throw new Error(`Title has incorrect size: ${s.length}`);
  if (!e.length || e.length > 256)
    throw new Error(`Message has incorrect size: ${e.length}`);
  if (n.length > 3)
    throw new Error(`Buttons have incorrect size: ${n.length}`);
  return n.length ? r = n.map((i) => {
    const { id: o = "" } = i;
    if (o.length > 64)
      throw new Error(`Button ID has incorrect size: ${o}`);
    if (!i.type || i.type === "default" || i.type === "destructive") {
      const a = i.text.trim();
      if (!a.length || a.length > 64) {
        const h = i.type || "default";
        throw new Error(`Button text with type "${h}" has incorrect size: ${i.text.length}`);
      }
      return { ...i, text: a, id: o };
    }
    return { ...i, id: o };
  }) : r = [{ type: "close", id: "" }], { title: s, message: e, buttons: r };
}
class ws extends k {
  constructor(e, s, n) {
    super({ isOpened: e }, s, { open: "web_app_open_popup" }), this.postEvent = n;
  }
  set isOpened(e) {
    this.set("isOpened", e);
  }
  /**
   * True if the Popup is opened.
   */
  get isOpened() {
    return this.get("isOpened");
  }
  /**
   * A method that shows a native popup described by the `params` argument.
   * Promise will be resolved when popup is closed. Resolved value will have
   * an identifier of pressed button.
   *
   * In case, user clicked outside the popup or clicked top right popup close
   * button, null will be returned.
   *
   * @param options - popup parameters.
   * @throws {Error} Popup is already opened.
   */
  async open(e) {
    if (this.isOpened)
      throw new Error("Popup is already opened.");
    this.isOpened = !0;
    try {
      const { button_id: s = null } = await w({
        event: "popup_closed",
        method: "web_app_open_popup",
        postEvent: this.postEvent,
        params: _s(e)
      });
      return s;
    } finally {
      this.isOpened = !1;
    }
  }
}
const gs = l(
  ({ postEvent: t, version: e }) => new ws(!1, e, t)
);
class fs extends k {
  constructor(e, s, n) {
    super({ isOpened: e }, s, {
      close: "web_app_close_scan_qr_popup",
      open: "web_app_open_scan_qr_popup"
    }), this.postEvent = n;
  }
  /**
   * Closes the scanner.
   */
  close() {
    this.postEvent("web_app_close_scan_qr_popup"), this.isOpened = !1;
  }
  set isOpened(e) {
    this.set("isOpened", e);
  }
  /**
   * Returns true if the scanner is currently opened.
   */
  get isOpened() {
    return this.get("isOpened");
  }
  async open(e) {
    if (this.isOpened)
      throw new Error("The scanner is already opened");
    const { text: s, capture: n } = (typeof e == "string" ? { text: e } : e) || {};
    this.isOpened = !0;
    try {
      const r = (await w({
        method: "web_app_open_scan_qr_popup",
        event: ["qr_text_received", "scan_qr_popup_closed"],
        postEvent: this.postEvent,
        params: { text: s },
        capture(i) {
          return i.event === "scan_qr_popup_closed" || !n || n(i.payload);
        }
      }) || {}).data || null;
      return r && this.close(), r;
    } finally {
      this.isOpened = !1;
    }
  }
  // TODO: Streaming mode, allowing to scan several QRs until closed.
}
const bs = l(
  ({ version: t, postEvent: e }) => new fs(!1, t, e)
);
class ms extends pe {
  constructor(e, s, n) {
    super({ isVisible: e }, s, {
      show: "web_app_setup_settings_button",
      hide: "web_app_setup_settings_button"
    }), c(this, "on", (r, i) => r === "click" ? y("settings_button_pressed", i) : this.state.on(r, i)), c(this, "off", (r, i) => r === "click" ? z("settings_button_pressed", i) : this.state.off(r, i)), this.postEvent = n;
  }
  set isVisible(e) {
    this.set("isVisible", e), this.postEvent("web_app_setup_settings_button", { is_visible: e });
  }
  /**
   * True if the SettingsButton is visible.
   */
  get isVisible() {
    return this.get("isVisible");
  }
  /**
   * Hides the SettingsButton.
   */
  hide() {
    this.isVisible = !1;
  }
  /**
   * Shows the SettingsButton.
   */
  show() {
    this.isVisible = !0;
  }
}
const vs = l(
  "settingsButton",
  ({
    version: t,
    postEvent: e,
    state: s = { isVisible: !1 }
  }) => new ms(s.isVisible, t, e)
);
class ys extends k {
  constructor(e, s, n) {
    super({ isVerticalSwipeEnabled: e }, s, {
      disableVerticalSwipe: "web_app_setup_swipe_behavior",
      enableVerticalSwipe: "web_app_setup_swipe_behavior"
    }), this.postEvent = n;
  }
  set isVerticalSwipeEnabled(e) {
    this.set("isVerticalSwipeEnabled", e), this.postEvent("web_app_setup_swipe_behavior", { allow_vertical_swipe: e });
  }
  /**
   * True, if the vertical swipe enabled.
   */
  get isVerticalSwipeEnabled() {
    return this.get("isVerticalSwipeEnabled");
  }
  /**
   * Disables the vertical swipe.
   */
  disableVerticalSwipe() {
    this.isVerticalSwipeEnabled = !1;
  }
  /**
   * Enables the vertical swipe.
   */
  enableVerticalSwipe() {
    this.isVerticalSwipeEnabled = !0;
  }
}
const Es = l(
  "swipeBehavior",
  ({
    postEvent: t,
    state: e = { isVerticalSwipeEnabled: !0 },
    version: s
  }) => new ys(e.isVerticalSwipeEnabled, s, t)
);
function Ze(t) {
  return He().parse(t);
}
class Ps extends de {
  /**
   * @since v6.10
   */
  get accentTextColor() {
    return this.get("accentTextColor");
  }
  get bgColor() {
    return this.get("bgColor");
  }
  get buttonColor() {
    return this.get("buttonColor");
  }
  get buttonTextColor() {
    return this.get("buttonTextColor");
  }
  get destructiveTextColor() {
    return this.get("destructiveTextColor");
  }
  /**
   * Returns the copy of the internal state of the current component instance.
   */
  getState() {
    return this.clone();
  }
  /**
   * @since v6.10
   */
  get headerBgColor() {
    return this.get("headerBgColor");
  }
  get hintColor() {
    return this.get("hintColor");
  }
  /**
   * @returns True in case, current color scheme is recognized as dark. This
   * value is calculated according to theme bg color.
   */
  get isDark() {
    return !this.bgColor || Be(this.bgColor);
  }
  get linkColor() {
    return this.get("linkColor");
  }
  get secondaryBgColor() {
    return this.get("secondaryBgColor");
  }
  /**
   * @since v6.10
   */
  get sectionBgColor() {
    return this.get("sectionBgColor");
  }
  /**
   * @since v6.10
   */
  get sectionHeaderTextColor() {
    return this.get("sectionHeaderTextColor");
  }
  /**
   * @since v7.6
   */
  get sectionSeparatorColor() {
    return this.get("sectionHeaderTextColor");
  }
  /**
   * Starts listening to the external theme changes and applies them.
   * @returns Function to stop listening.
   */
  listen() {
    return y("theme_changed", (e) => {
      this.set(Ze(e.theme_params));
    });
  }
  /**
   * @since v6.10
   */
  get subtitleTextColor() {
    return this.get("subtitleTextColor");
  }
  get textColor() {
    return this.get("textColor");
  }
}
const Ss = l(
  "themeParams",
  ({ themeParams: t, state: e = t, addCleanup: s }) => {
    const n = new Ps(e);
    return s(n.listen()), n;
  }
);
function Pn(t = {}) {
  return w({
    ...t,
    method: "web_app_request_theme",
    event: "theme_changed"
  }).then(Ze);
}
function M(t, e) {
  return t.startsWith(e) ? t : `${e}${t}`;
}
function L(t) {
  return new URL(
    typeof t == "string" ? t : `${t.pathname || ""}${M(t.search || "", "?")}${M(t.hash || "", "#")}`,
    "http://a"
  );
}
class Rs extends _e {
  constructor(e, s, n) {
    super(e, { readTextFromClipboard: "web_app_read_text_from_clipboard" }), c(this, "supportsParam"), this.version = e, this.createRequestId = s, this.postEvent = n, this.supportsParam = Ye(e, {
      "openLink.tryInstantView": ["web_app_open_link", "try_instant_view"]
    });
  }
  openLink(e, s) {
    const n = L(e).toString();
    if (!x("web_app_open_link", this.version)) {
      window.open(n, "_blank");
      return;
    }
    const r = typeof s == "boolean" ? { tryInstantView: s } : s || {};
    this.postEvent("web_app_open_link", {
      url: n,
      try_browser: r.tryBrowser,
      try_instant_view: r.tryInstantView
    });
  }
  /**
   * Opens a Telegram link inside Telegram app. The Mini App will be closed. It expects passing
   * link in full format, with hostname "t.me".
   * @param url - URL to be opened.
   * @throws {Error} URL has not allowed hostname.
   */
  openTelegramLink(e) {
    const { hostname: s, pathname: n, search: r } = new URL(e, "https://t.me");
    if (s !== "t.me")
      throw new Error(`URL has not allowed hostname: ${s}. Only "t.me" is allowed`);
    if (!x("web_app_open_tg_link", this.version)) {
      window.location.href = e;
      return;
    }
    this.postEvent("web_app_open_tg_link", { path_full: n + r });
  }
  /**
   * Reads text from clipboard and returns string or null. null is returned
   * in cases:
   * - Value in clipboard is not text
   * - Access to clipboard is not allowed
   */
  async readTextFromClipboard() {
    const e = this.createRequestId(), {
      data: s = null
    } = await w({
      method: "web_app_read_text_from_clipboard",
      event: "clipboard_text_received",
      postEvent: this.postEvent,
      params: { req_id: e },
      capture: qe(e)
    });
    return s;
  }
  /**
   * Shares specified URL with the passed to the chats, selected by user. After being called,
   * it closes the mini application.
   *
   * This method uses Telegram's Share Links.
   * @param url - URL to share.
   * @param text - text to append after the URL.
   * @see https://core.telegram.org/api/links#share-links
   * @see https://core.telegram.org/widgets/share#custom-buttons
   */
  shareURL(e, s) {
    this.openTelegramLink(
      "https://t.me/share/url?" + new URLSearchParams({ url: e, text: s || "" }).toString().replace(/\+/g, "%20")
    );
  }
}
const xs = l(
  ({ version: t, postEvent: e, createRequestId: s }) => new Rs(t, s, e)
);
async function Xe(t = {}) {
  const {
    is_expanded: e,
    is_state_stable: s,
    ...n
  } = await w({
    ...t,
    method: "web_app_request_viewport",
    event: "viewport_changed"
  });
  return { ...n, isExpanded: e, isStateStable: s };
}
function q(t) {
  return t < 0 ? 0 : t;
}
class Cs extends de {
  constructor({ postEvent: e, stableHeight: s, height: n, width: r, isExpanded: i }) {
    super({
      height: q(n),
      isExpanded: i,
      stableHeight: q(s),
      width: q(r)
    }), c(this, "postEvent"), this.postEvent = e;
  }
  /**
   * Requests viewport information from the Telegram application and updates current Viewport
   * instance.
   * @param options - options to request fresh data.
   */
  async sync(e) {
    const { isStateStable: s, ...n } = await Xe(e);
    this.set({
      ...n,
      stableHeight: s ? n.height : this.get("stableHeight")
    });
  }
  /**
   * The current height of the **visible area** of the Mini App.
   *
   * The application can display just the top part of the Mini App, with its lower part remaining
   * outside the screen area. From this position, the user can "pull" the Mini App to its
   * maximum height, while the bot can do the same by calling `expand` method. As the position of
   * the Mini App changes, the current height value of the visible area will be updated  in real
   * time.
   *
   * Please note that the refresh rate of this value is not sufficient to smoothly follow the
   * lower border of the window. It should not be used to pin interface elements to the bottom
   * of the visible area. It's more appropriate to use the value of the `stableHeight`
   * field for this purpose.
   *
   * @see stableHeight
   */
  get height() {
    return this.get("height");
  }
  /**
   * The height of the visible area of the Mini App in its last stable state.
   *
   * The application can display just the top part of the Mini App, with its lower part remaining
   * outside the screen area. From this position, the user can "pull" the Mini App to its
   * maximum height, while the application can do the same by calling `expand` method.
   *
   * Unlike the value of `height`, the value of `stableHeight` does not change as the position
   * of the Mini App changes with user gestures or during animations. The value of `stableHeight`
   * will be updated after all gestures and animations are completed and
   * the Mini App reaches its final size.
   *
   * @see height
   */
  get stableHeight() {
    return this.get("stableHeight");
  }
  /**
   * Starts listening to viewport changes and applies them.
   * @returns Function to stop listening.
   */
  listen() {
    return y("viewport_changed", (e) => {
      const {
        height: s,
        width: n,
        is_expanded: r,
        is_state_stable: i
      } = e, o = q(s);
      this.set({
        height: o,
        isExpanded: r,
        width: q(n),
        ...i ? { stableHeight: o } : {}
      });
    });
  }
  /**
   * True if the Mini App is expanded to the maximum available height. Otherwise, if
   * the Mini App occupies part of the screen and can be expanded to the full height using
   * `expand` method.
   * @see expand
   */
  get isExpanded() {
    return this.get("isExpanded");
  }
  /**
   * Current visible area width.
   */
  get width() {
    return this.get("width");
  }
  /**
   * A method that expands the Mini App to the maximum available height. To find out if the Mini
   * App is expanded to the maximum height, refer to the value of the `isExpanded`.
   * @see isExpanded
   */
  expand() {
    this.postEvent("web_app_expand"), this.set("isExpanded", !0);
  }
  /**
   * True if the current viewport height is stable and is not going to change in the next moment.
   */
  get isStable() {
    return this.stableHeight === this.height;
  }
}
const Ts = l(
  "viewport",
  async ({ state: t, platform: e, postEvent: s, addCleanup: n }) => {
    let r = !1, i = 0, o = 0, a = 0;
    if (t)
      r = t.isExpanded, i = t.height, o = t.width, a = t.stableHeight;
    else if (["macos", "tdesktop", "unigram", "webk", "weba", "web"].includes(e))
      r = !0, i = window.innerHeight, o = window.innerWidth, a = window.innerHeight;
    else {
      const p = await Xe({ timeout: 1e3, postEvent: s });
      r = p.isExpanded, i = p.height, o = p.width, a = p.isStateStable ? i : 0;
    }
    const h = new Cs({
      postEvent: s,
      height: i,
      width: o,
      stableHeight: a,
      isExpanded: r
    });
    return n(h.listen()), h;
  }
);
function P(t, e) {
  document.documentElement.style.setProperty(t, e);
}
function Sn(t, e, s) {
  s || (s = (a) => `--tg-${a}-color`);
  const n = s("header"), r = s("bg"), i = () => {
    const { headerColor: a } = t;
    if (ce(a))
      P(n, a);
    else {
      const { bgColor: h, secondaryBgColor: p } = e;
      a === "bg_color" && h ? P(n, h) : a === "secondary_bg_color" && p && P(n, p);
    }
    P(r, t.bgColor);
  }, o = [
    e.on("change", i),
    t.on("change", i)
  ];
  return i(), () => o.forEach((a) => a());
}
function Rn(t, e) {
  e || (e = (n) => `--tg-theme-${n.replace(/[A-Z]/g, (r) => `-${r.toLowerCase()}`)}`);
  const s = () => {
    Object.entries(t.getState()).forEach(([n, r]) => {
      r && P(e(n), r);
    });
  };
  return s(), t.on("change", s);
}
function xn(t, e) {
  e || (e = (p) => `--tg-viewport-${p}`);
  const [
    s,
    n,
    r
  ] = ["height", "width", "stable-height"].map((p) => e(p)), i = () => P(s, `${t.height}px`), o = () => P(n, `${t.width}px`), a = () => P(r, `${t.stableHeight}px`), h = [
    t.on("change:height", i),
    t.on("change:width", o),
    t.on("change:stableHeight", a)
  ];
  return i(), o(), a(), () => h.forEach((p) => p());
}
function As(t = !0) {
  const e = [
    y("reload_iframe", () => {
      B("iframe_will_reload"), window.location.reload();
    })
  ], s = () => e.forEach((n) => n());
  if (t) {
    const n = document.createElement("style");
    n.id = "telegram-custom-styles", document.head.appendChild(n), e.push(
      y("set_custom_style", (r) => {
        n.innerHTML = r;
      }),
      () => document.head.removeChild(n)
    );
  }
  return B("iframe_ready", { reload_supported: !0 }), s;
}
function ks() {
  return typeof window > "u";
}
async function Cn() {
  if (Ie(window))
    return !0;
  try {
    return await w({ method: "web_app_request_theme", event: "theme_changed", timeout: 100 }), !0;
  } catch {
    return !1;
  }
}
function Tn(t) {
  const e = typeof t == "string" ? le(t) : t;
  Je(e);
  function s(r) {
    if (typeof r == "string")
      try {
        const { eventType: i } = Ae(r);
        i === "web_app_request_theme" && te("theme_changed", {
          theme_params: JSON.parse(Ke(e.themeParams))
        }), i === "web_app_request_viewport" && te("viewport_changed", {
          width: window.innerWidth,
          height: window.innerHeight,
          is_state_stable: !0,
          is_expanded: !0
        });
      } catch {
      }
  }
  if (ae()) {
    const r = window.parent.postMessage.bind(window.parent);
    window.parent.postMessage = (i) => {
      s(i), r(i);
    };
    return;
  }
  if (ke(window)) {
    const r = window.external.notify.bind(window.external);
    window.external.notify = (i) => {
      s(i), r(i);
    };
    return;
  }
  const n = window.TelegramWebviewProxy;
  window.TelegramWebviewProxy = {
    ...n || {},
    postEvent(...r) {
      s(JSON.stringify({ eventType: r[0], eventData: r[1] })), n && n.postEvent(...r);
    }
  };
}
function Is(t) {
  return t instanceof W;
}
function An(t, e) {
  return Is(t) && t.type === e;
}
function J(t, e) {
  let s, n, r;
  return typeof t == "string" ? s = t : (s = t.pathname === void 0 ? e : t.pathname, n = t.params, r = t.id), Object.freeze({
    id: r || (Math.random() * 2 ** 14 | 0).toString(16),
    pathname: s,
    params: n
  });
}
class Os {
  constructor(e, s, n = B) {
    if (c(this, "history"), c(this, "ee", new N()), c(this, "attached", !1), c(this, "back", () => this.go(-1)), c(this, "on", this.ee.on.bind(this.ee)), c(this, "off", this.ee.off.bind(this.ee)), this._index = s, this.postEvent = n, e.length === 0)
      throw b(mt, "History should not be empty.");
    if (s < 0 || s >= e.length)
      throw b(
        vt,
        "Index should not be zero and higher or equal than history size."
      );
    this.history = e.map((r) => J(r, ""));
  }
  /**
   * Allows this navigator to control the `BackButton` visibility state. It also tracks the
   * `BackButton` clicks and calls the `back` method.
   */
  attach() {
    this.attached || (this.attached = !0, this.sync(), y("back_button_pressed", this.back));
  }
  /**
   * Currently active history item.
   */
  get current() {
    return this.history[this.index];
  }
  /**
   * Prevents current navigator from controlling the BackButton visibility state.
   */
  detach() {
    this.attached = !1, z("back_button_pressed", this.back);
  }
  /**
   * Goes to the next history item.
   */
  forward() {
    this.go(1);
  }
  /**
   * Changes currently active history item index by the specified delta. This method doesn't
   * change index in case, the updated index points to the non-existing history item. This behavior
   * is preserved until the `fit` argument is specified.
   * @param delta - index delta.
   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.
   */
  go(e, s) {
    const n = this.index + e, r = Math.min(
      Math.max(0, n),
      this.history.length - 1
    );
    (n === r || s) && this.replaceAndMove(r, this.history[r]);
  }
  /**
   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.
   *
   * If "fit" option was specified and index is out of bounds, it will be cut to the nearest
   * bound.
   * @param index - target index.
   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.
   */
  goTo(e, s) {
    this.go(e - this.index, s);
  }
  /**
   * True if navigator has items before the current item.
   */
  get hasPrev() {
    return this.index > 0;
  }
  /**
   * True if navigator has items after the current item.
   */
  get hasNext() {
    return this.index !== this.history.length - 1;
  }
  /**
   * Currently active history item index.
   */
  get index() {
    return this._index;
  }
  /**
   * Adds a new history item removing all after the current one.
   * @param item - item to add.
   */
  push(e) {
    this.hasNext && this.history.splice(this.index + 1), this.replaceAndMove(this.index + 1, J(e, this.current.pathname));
  }
  /**
   * Replaces the current history item.
   * @param item - item to replace the current item with.
   */
  replace(e) {
    this.replaceAndMove(this.index, J(e, this.current.pathname));
  }
  /**
   * Sets history item by the specified index.
   * @param index - history item index to replace.
   * @param historyItem - history item to set.
   */
  replaceAndMove(e, s) {
    const n = e - this.index;
    if (!n && this.current === s)
      return;
    const r = this.current;
    if (this.index !== e) {
      const i = this._index;
      this._index = e, this.attached && i > 0 != e > 0 && this.sync();
    }
    this.history[e] = s, this.ee.emit("change", {
      navigator: this,
      from: r,
      to: this.current,
      delta: n
    });
  }
  /**
   * Actualizes the `BackButton` visibility state.
   */
  sync() {
    this.postEvent("web_app_setup_back_button", { is_visible: !!this.index });
  }
}
function F({
  params: t,
  ...e
}) {
  return { ...t || { hash: "", search: "" }, ...e };
}
function U(t) {
  const e = typeof t == "string" ? t.startsWith("/") : !!(t.pathname && t.pathname.startsWith("/")), s = L(t);
  return `${e ? s.pathname : s.pathname.slice(1)}${s.search}${s.hash}`;
}
function Q(t, e, s) {
  let n, r;
  typeof t == "string" ? n = t : (n = U(t), s = t.state, r = t.id);
  const { pathname: i, search: o, hash: a } = new URL(n, `http://a${M(e, "/")}`);
  return { id: r, pathname: i, params: { hash: a, search: o, state: s } };
}
async function D(t) {
  return t === 0 ? !0 : Promise.race([
    new Promise((e) => {
      const s = ee("popstate", () => {
        s(), e(!0);
      });
      window.history.go(t);
    }),
    // Usually, it takes about 1ms to emit this event, but we use some buffer.
    new Promise((e) => {
      setTimeout(e, 50, !1);
    })
  ]);
}
async function qs() {
  if (window.history.length <= 1 || (window.history.pushState(null, ""), await D(1 - window.history.length)))
    return;
  let t = await D(-1);
  for (; t; )
    t = await D(-1);
}
function et(t) {
  return L(t).pathname;
}
const Ee = 0, Y = 1, Z = 2;
class tt {
  constructor(e, s, { postEvent: n, hashMode: r = "classic", base: i } = {}) {
    c(this, "navigator"), c(this, "ee", new N()), c(this, "hashMode"), c(this, "base"), c(this, "attached", !1), c(this, "onPopState", ({ state: o }) => {
      if (o === null)
        return this.push(this.parsePath(window.location.href));
      o === Ee ? window.history.forward() : o === Y && this.back(), o === Z && this.forward();
    }), c(this, "onNavigatorChange", async ({
      to: o,
      from: a,
      delta: h
    }) => {
      this.attached && await this.syncHistory(), this.ee.emit("change", {
        delta: h,
        from: F(a),
        to: F(o),
        navigator: this
      });
    }), c(this, "on", this.ee.on.bind(this.ee)), c(this, "off", this.ee.off.bind(this.ee)), this.navigator = new Os(
      e.map((o) => Q(o, "/")),
      s,
      n
    ), this.navigator.on("change", (o) => {
      this.onNavigatorChange(o);
    }), this.hashMode = r, this.base = et(i || "");
  }
  /**
   * Attaches current navigator to the browser history allowing navigator to manipulate it.
   */
  async attach() {
    this.attached || (this.attached = !0, this.navigator.attach(), window.addEventListener("popstate", this.onPopState), await this.syncHistory());
  }
  /**
   * Goes back in history by 1.
   */
  back() {
    this.navigator.back();
  }
  /**
   * Detaches current navigator from the browser history.
   */
  detach() {
    this.attached = !1, this.navigator.detach(), window.removeEventListener("popstate", this.onPopState);
  }
  /**
   * Goes forward in history.
   */
  forward() {
    return this.navigator.forward();
  }
  /**
   * Current history cursor.
   */
  get index() {
    return this.navigator.index;
  }
  /**
   * Current history item identifier.
   */
  get id() {
    return this.navigator.current.id;
  }
  /**
   * Changes currently active history item index by the specified delta. This method doesn't
   * change index in case, the updated index points to the non-existing history item. This behavior
   * is preserved until the `fit` argument is specified.
   * @param delta - index delta.
   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.
   */
  go(e, s) {
    return this.navigator.go(e, s);
  }
  /**
   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.
   *
   * If "fit" option was specified and index is out of bounds, it will be cut to the nearest
   * bound.
   * @param index - target index.
   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.
   */
  goTo(e, s) {
    this.navigator.goTo(e, s);
  }
  /**
   * Current history item hash.
   * @see URL.hash
   * @example
   * "", "#my-hash"
   */
  get hash() {
    return (this.navigator.current.params || {}).hash || "";
  }
  /**
   * True if navigator has items before the current item.
   */
  get hasPrev() {
    return this.navigator.hasPrev;
  }
  /**
   * True if navigator has items after the current item.
   */
  get hasNext() {
    return this.navigator.hasNext;
  }
  /**
   * Navigation history.
   */
  get history() {
    return this.navigator.history.map(F);
  }
  /**
   * Path, including pathname, search and hash.
   * @example Pathname only.
   * "/pathname"
   * @example Pathname + search.
   * "/pathname?search"
   * @example Pathname + hash.
   * "/pathname#hash"
   * @example Pathname + search + hash.
   * "/pathname?search#hash"
   */
  get path() {
    return U(this);
  }
  /**
   * Current pathname. Always starts with the slash.
   * @see URL.pathname
   * @example
   * "/", "/abc"
   */
  get pathname() {
    return this.navigator.current.pathname;
  }
  /**
   * Depending on the current navigation type, parses incoming path and returns it presented as
   * an object. In other words, this method parses the passed path and returns object, describing
   * how the navigator "sees" it.
   *
   * @example Hash mode is omitted.
   * parsePath('/abc?a=1#hash');
   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }
   * parsePath('http://example.com/abc?a=1#hash');
   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }
   *
   * @example Hash mode is enabled.
   * parsePath('/abc?a=1#tma?is=cool#yeah');
   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }
   * parsePath('http://example.com/abc?a=1#tma?is=cool#yeah');
   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }
   */
  parsePath(e) {
    let s = L(e);
    return this.hashMode && (s = L(s.hash.slice(1))), {
      pathname: s.pathname,
      search: s.search,
      hash: s.hash
    };
  }
  push(e, s) {
    const n = Q(e, this.path), { state: r = s } = n.params;
    this.navigator.push({ ...n, params: { ...n.params, state: r } });
  }
  replace(e, s) {
    const n = Q(e, this.path), { state: r = s } = n.params;
    this.navigator.replace({ ...n, params: { ...n.params, state: r } });
  }
  /**
   * Combines the navigator `base` property with the passed path data applying the navigator
   * navigation mode.
   * @param value - path presented as string or URLLike.
   */
  renderPath(e) {
    const s = (this.base.length === 1 ? "" : this.base) + M(U(e), "/");
    return this.hashMode ? M(s.slice(1), this.hashMode === "classic" ? "#" : "#/") : s;
  }
  /**
   * Synchronizes current navigator state with browser history.
   */
  async syncHistory() {
    window.removeEventListener("popstate", this.onPopState);
    const { state: e } = this, s = this.renderPath(this);
    await qs(), this.hasPrev && this.hasNext ? (window.history.replaceState(Y, ""), window.history.pushState(e, "", s), window.history.pushState(Z, ""), await D(-1)) : this.hasPrev ? (window.history.replaceState(Y, ""), window.history.pushState(e, "", s)) : this.hasNext ? (window.history.replaceState(e, s), window.history.pushState(Z, ""), await D(-1)) : (window.history.replaceState(Ee, ""), window.history.pushState(e, "", s)), window.addEventListener("popstate", this.onPopState);
  }
  /**
   * Current query parameters.
   * @see URL.search
   * @example
   * "", "?", "?a=1"
   */
  get search() {
    return (this.navigator.current.params || {}).search || "";
  }
  /**
   * Current history item state.
   */
  get state() {
    return (this.navigator.current.params || {}).state;
  }
}
function Vs(t) {
  t || (t = {});
  const { href: e, hash: s } = window.location;
  let n = U(
    t.hashMode === null ? e : s.includes("?") ? s.slice(1) : `?${s.slice(1)}`
  );
  const r = t.base ? et(t.base) : void 0;
  if (r) {
    if (!n.startsWith(r))
      throw b(
        yt,
        `Path "${n}" expected to be starting with "${r}"`
      );
    n = n.slice(r.length);
  }
  return new tt([n], 0, t);
}
function kn(t) {
  const e = t.match(/#(.+)/);
  return e ? e[1] : null;
}
function Ds(t, e) {
  if (Fe()) {
    const s = sessionStorage.getItem(t);
    if (s)
      try {
        const { index: n, history: r } = JSON.parse(s);
        return new tt(
          r,
          n,
          e
        );
      } catch (n) {
        console.error("Unable to restore hash navigator state.", n);
      }
  }
  return Vs(e);
}
function In(t, e) {
  const s = Ds(t, e), n = () => sessionStorage.setItem(t, JSON.stringify({
    index: s.index,
    history: s.history
  }));
  return s.on("change", n), n(), s;
}
function d(t, e) {
  function s(n) {
    return function(i, o, a) {
      return (h) => {
        const p = {
          ...h,
          [i]: n(o)
        };
        return /* @__PURE__ */ Pe(a, { ...p });
      };
    };
  }
  return [s(t), s(e)];
}
const st = nt(void 0);
function Ns() {
  const t = rt(st);
  if (!t)
    throw new Error("useSDK was used outside the SDKProvider.");
  return t;
}
function _(t) {
  function e(n) {
    const r = Ns(), [i, o] = re(
      n ? void 0 : () => {
        if (ks())
          throw new Error("Using hooks on the server side, you must explicitly specify ssr = true option");
        return r.use(t);
      }
    );
    return S(() => {
      o(r.use(t));
    }, [r]), i;
  }
  function s(n) {
    const r = e(n);
    if (r) {
      if ("error" in r)
        throw r.error;
      return r.result;
    }
  }
  return [e, s];
}
const [Bs, Ms] = _(jt), [On, qn] = d(
  Bs,
  Ms
), [Ls, $s] = _(Jt), [Vn, Dn] = d(
  Ls,
  $s
), [Hs, Us] = _(Qt), [Nn, Bn] = d(
  Hs,
  Us
), [Ws, Gs] = _(ts), [Mn, Ln] = d(
  Ws,
  Gs
), [js, zs] = _(ns), [$n, Hn] = d(
  js,
  zs
), [Ks, Js] = _(is), [Un, Wn] = d(Ks, Js), [Fs, Qs] = _(as), [Gn, jn] = d(Fs, Qs), [Ys, Zs] = _(hs), [zn, Kn] = d(Ys, Zs), [Xs, en] = _(ds), [Jn, Fn] = d(Xs, en), [tn, sn] = _(gs), [Qn, Yn] = d(tn, sn), [nn, rn] = _(bs), [Zn, Xn] = d(nn, rn), [on, an] = _(vs), [er, tr] = d(
  on,
  an
), [cn, hn] = _(Es), [sr, nr] = d(
  cn,
  hn
), [pn, un] = _(Ss), [rr, ir] = d(pn, un);
function or(t) {
  const [e, s] = re(() => t ? void 0 : ne());
  return S(() => {
    t && s(ne());
  }, []), e;
}
const [ln, dn] = _(xs), [ar, cr] = d(ln, dn), [_n, wn] = _(Ts), [hr, pr] = d(_n, wn);
function ur({ children: t, acceptCustomStyles: e, debug: s }) {
  const n = be(!0), [r, i] = re(/* @__PURE__ */ new Map()), o = be(r), a = it(
    (p) => {
      n.current && i((C) => (p && p(C), new Map(C)));
    },
    []
  ), h = ot(() => ({
    use(p, ...C) {
      const we = r.get(p);
      if (we)
        return we;
      let m, K;
      try {
        m = p(...C);
      } catch (g) {
        K = g;
      }
      function H(g) {
        return r.set(p, g), g;
      }
      if (K)
        return H({ error: K });
      let I;
      if (Array.isArray(m) && (I = m[1], m = m[0]), !m)
        return H({ result: m, cleanup: I });
      function ge(g) {
        if ("on" in g) {
          const O = g.on("change", () => a()), fe = I;
          I = () => {
            fe && fe(), O();
          };
        }
        return { result: g, cleanup: I };
      }
      return m instanceof Promise ? (m.then(
        (g) => a((O) => O.set(p, ge(g))),
        (g) => a((O) => O.set(p, { error: g }))
      ), H({})) : H(ge(m));
    }
  }), [r]);
  return S(() => (n.current = !0, () => {
    n.current = !1;
  }), []), S(() => {
    if (ae())
      return As(e);
  }, [e]), S(() => {
    ut(s || !1);
  }, [s]), S(() => {
    o.current = r;
  }, [r]), S(() => () => {
    o.current.forEach((p) => {
      "cleanup" in p && p.cleanup && p.cleanup();
    });
  }, []), /* @__PURE__ */ Pe(st.Provider, { value: h, children: t });
}
export {
  Vt as BackButton,
  Os as BasicNavigator,
  zt as BiometryManager,
  tt as BrowserNavigator,
  Ft as ClosingBehavior,
  es as CloudStorage,
  yt as ERR_INVALID_PATH_BASE,
  gt as ERR_INVOKE_CUSTOM_METHOD_RESPONSE,
  _t as ERR_METHOD_PARAMETER_UNSUPPORTED,
  dt as ERR_METHOD_UNSUPPORTED,
  mt as ERR_NAVIGATION_HISTORY_EMPTY,
  vt as ERR_NAVIGATION_INDEX_INVALID,
  bn as ERR_NAVIGATION_ITEM_INVALID,
  xe as ERR_PARSE,
  mn as ERR_SSR_INIT,
  ft as ERR_TIMED_OUT,
  bt as ERR_UNEXPECTED_TYPE,
  wt as ERR_UNKNOWN_ENV,
  N as EventEmitter,
  ss as HapticFeedback,
  rs as InitData,
  os as Invoice,
  cs as MainButton,
  ls as MiniApp,
  ws as Popup,
  fs as QRScanner,
  W as SDKError,
  ur as SDKProvider,
  ms as SettingsButton,
  ys as SwipeBehavior,
  Ps as ThemeParams,
  Rs as Utils,
  Cs as Viewport,
  Xt as array,
  Sn as bindMiniAppCSSVars,
  Rn as bindThemeParamsCSSVars,
  xn as bindViewportCSSVars,
  E as boolean,
  qe as captureSameReq,
  se as classNames,
  Tt as compareVersions,
  Vs as createBrowserNavigatorFromLocation,
  It as createPostEvent,
  L as createSafeURL,
  Le as date,
  kn as getHash,
  et as getPathname,
  jt as initBackButton,
  Jt as initBiometryManager,
  Qt as initClosingBehavior,
  ts as initCloudStorage,
  ns as initHapticFeedback,
  is as initInitData,
  as as initInvoice,
  hs as initMainButton,
  ds as initMiniApp,
  In as initNavigator,
  gs as initPopup,
  bs as initQRScanner,
  vs as initSettingsButton,
  Es as initSwipeBehavior,
  Ss as initThemeParams,
  xs as initUtils,
  Ts as initViewport,
  As as initWeb,
  V as invokeCustomMethod,
  Be as isColorDark,
  ae as isIframe,
  Fe as isPageReload,
  ce as isRGB,
  Ot as isRGBShort,
  Is as isSDKError,
  An as isSDKErrorOfType,
  ks as isSSR,
  Cn as isTMA,
  v as json,
  yn as mergeClassNames,
  Tn as mockTelegramEnv,
  R as number,
  z as off,
  y as on,
  En as parseInitData,
  le as parseLaunchParams,
  Ze as parseThemeParams,
  B as postEvent,
  w as request,
  Kt as requestBiometryInfo,
  Pn as requestThemeParams,
  Xe as requestViewport,
  ne as retrieveLaunchParams,
  Nt as rgb,
  ue as searchParams,
  Ut as serializeLaunchParams,
  Ke as serializeThemeParams,
  P as setCSSVar,
  ut as setDebug,
  vn as setTargetOrigin,
  u as string,
  ht as subscribe,
  x as supports,
  kt as targetOrigin,
  Ne as toRGB,
  Re as unsubscribe,
  U as urlToPath,
  Ms as useBackButton,
  Bs as useBackButtonRaw,
  $s as useBiometryManager,
  Ls as useBiometryManagerRaw,
  Us as useClosingBehavior,
  Hs as useClosingBehaviorRaw,
  Gs as useCloudStorage,
  Ws as useCloudStorageRaw,
  zs as useHapticFeedback,
  js as useHapticFeedbackRaw,
  Js as useInitData,
  Ks as useInitDataRaw,
  Qs as useInvoice,
  Fs as useInvoiceRaw,
  or as useLaunchParams,
  Zs as useMainButton,
  Ys as useMainButtonRaw,
  en as useMiniApp,
  Xs as useMiniAppRaw,
  sn as usePopup,
  tn as usePopupRaw,
  rn as useQRScanner,
  nn as useQRScannerRaw,
  Ns as useSDK,
  an as useSettingsButton,
  on as useSettingsButtonRaw,
  hn as useSwipeBehavior,
  cn as useSwipeBehaviorRaw,
  un as useThemeParams,
  pn as useThemeParamsRaw,
  dn as useUtils,
  ln as useUtilsRaw,
  wn as useViewport,
  _n as useViewportRaw,
  qn as withBackButton,
  On as withBackButtonRaw,
  Dn as withBiometryManager,
  Vn as withBiometryManagerRaw,
  Bn as withClosingBehavior,
  Nn as withClosingBehaviorRaw,
  Ln as withCloudStorage,
  Mn as withCloudStorageRaw,
  Hn as withHapticFeedback,
  $n as withHapticFeedbackRaw,
  Wn as withInitData,
  Un as withInitDataRaw,
  jn as withInvoice,
  Gn as withInvoiceRaw,
  Kn as withMainButton,
  zn as withMainButtonRaw,
  Fn as withMiniApp,
  Jn as withMiniAppRaw,
  Yn as withPopup,
  Qn as withPopupRaw,
  Xn as withQRScanner,
  Zn as withQRScannerRaw,
  tr as withSettingsButton,
  er as withSettingsButtonRaw,
  nr as withSwipeBehavior,
  sr as withSwipeBehaviorRaw,
  ir as withThemeParams,
  rr as withThemeParamsRaw,
  De as withTimeout,
  cr as withUtils,
  ar as withUtilsRaw,
  pr as withViewport,
  hr as withViewportRaw
};
//# sourceMappingURL=index.js.map
